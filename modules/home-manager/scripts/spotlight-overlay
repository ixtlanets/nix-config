#!/usr/bin/env bash

SPOTLIGHT_STATE_FILE="/tmp/spotlight_state"
OVERLAY_TITLE="spotlight-overlay"
CIRCLE_RADIUS=48

# Function to create overlay window
create_overlay() {
    local monitor_info=$(hyprctl monitors -j | jq -r '.[0]')
    local width=$(echo "$monitor_info" | jq -r '.width')
    local height=$(echo "$monitor_info" | jq -r '.height')
    local x=$(echo "$monitor_info" | jq -r '.x')
    local y=$(echo "$monitor_info" | jq -r '.y')
    
    # Create a fullscreen overlay window
    hyprctl dispatch exec "[float; size ${width} ${height}; pos ${x} ${y}; noinitialfocus; nodim; title ${OVERLAY_TITLE}] kitty --class spotlight-overlay bash -c '
        # Create the overlay effect
        while [ -f "'"$SPOTLIGHT_STATE_FILE"'" ]; do
            # Get current cursor position
            cursor_pos=$(hyprctl cursorpos -j)
            cursor_x=$(echo "$cursor_pos" | jq -r ".x")
            cursor_y=$(echo "$cursor_pos" | jq -r ".y")
            
            # Clear screen and create dark background with clear circle
            printf "\033[2J\033[H"
            
            # Create dark overlay using terminal background
            printf "\033]11;#000000\007"
            
            # Move cursor to spotlight position and create clear area
            # We use a simple approach: move cursor to the spotlight position
            printf "\033[%d;%dH" $((cursor_y)) $((cursor_x))
            
            sleep 0.016  # ~60 FPS refresh rate
        done
    '"
}

# Function to update spotlight position
update_spotlight() {
    while [ -f "$SPOTLIGHT_STATE_FILE" ]; do
        # Get current cursor position
        cursor_pos=$(hyprctl cursorpos -j 2>/dev/null)
        if [ $? -eq 0 ]; then
            cursor_x=$(echo "$cursor_pos" | jq -r ".x" 2>/dev/null)
            cursor_y=$(echo "$cursor_pos" | jq -r ".y" 2>/dev/null)
            
            if [ "$cursor_x" != "null" ] && [ "$cursor_y" != "null" ]; then
                # Update overlay window position to follow cursor
                # This is a simplified approach - in practice, we might need a more sophisticated method
                hyprctl dispatch movewindow "exact ${cursor_x} ${cursor_y} ${OVERLAY_TITLE}" 2>/dev/null || true
            fi
        fi
        sleep 0.016  # ~60 FPS refresh rate
    done
}

# Main execution
create_overlay
sleep 0.5  # Give window time to create
update_spotlight

# Clean up when done
hyprctl dispatch closewindow "title:${OVERLAY_TITLE}" 2>/dev/null || true